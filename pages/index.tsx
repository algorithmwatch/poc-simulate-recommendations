import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { csv } from "d3-fetch";
import Item from "../components/item";
import { useState } from "react";

import _ from "lodash";

import { distance, multiply } from "mathjs";

const toFloat = (str) => (str == null ? 0 : parseFloat(str));

const weightVector = (selectionKeys, keys, values, selection) => {
  if (selectionKeys.includes("content")) {
    for (const k of ["cat1", "cat2", "cat3"]) {
      const kIndex = keys.indexOf(k);
      if (kIndex >= 0) {
        values[kIndex] = multiply(values[kIndex], selection["content"]);
      }
    }
  }
};

const orderByDistance = (data, selection) => {
  const selectionKeys = Object.keys(_.pickBy(selection, (v) => v !== "0"));
  const dataKeys = Object.keys(data[0]);
  const keys = _.intersection(selectionKeys, dataKeys);

  if (!keys.length) return data;

  const selectionValues = keys.map((x) => selection[x]).map(toFloat);

  weightVector(selectionKeys, keys, selectionValues, selection);

  const orderedData = data.map((e) => {
    const subset = keys.map((x) => e[x]).map(toFloat);

    weightVector(selectionKeys, keys, subset, selection);

    const dist = distance(selectionValues, subset);
    return { ...e, dist };
  });

  return _.orderBy(orderedData, "dist");
};

const Home: NextPage = ({ data, controls }) => {
  const initialValue = Object.assign(
    {},
    ...controls.map((x) => ({ [x]: "0" }))
  );
  const [value1, setValue1] = useState(initialValue);

  const controlEl = controls.map((x) => (
    <>
      <label>{x}</label>
      <input
        key={x}
        value={value1[x]}
        onChange={(event) => setValue1({ ...value1, [x]: event.target.value })}
        type="number"
        min="0"
        max="1"
        step="0.1"
      ></input>
      <br />
    </>
  ));

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Platform Simulator 3000!</h1>

        {controlEl}

        {orderByDistance(data, value1).map((x, i) => (
          <Item {...x} key={i} />
        ))}
        <div></div>
      </main>

      <footer className={styles.footer}>
        <div></div>
      </footer>
    </div>
  );
};

let data = null;

const setupData = async () => {
  if (data !== null) return data;

  let url = "http://localhost:3000/data.csv";
  if (process.env.NODE_ENV === "production")
    url = "http://prod1.algorithmwatch.org/data.csv";

  data = await csv(url);

  return data;
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const data = await setupData();

  return {
    props: {
      data,
      controls: ["cat1", "cat2", "cat3", "length", "age", "likes", "content"],
    },
  };
};

export default Home;
